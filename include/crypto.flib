crypto@@lstCryptos                      Equ
Macro crypto@@addCrypto                 algorithm*,                             alignment*,                             encrypt*,                               decrypt*
  crypto@@lstCryptos                    Equ                                     algorithm, alignment, encrypt, decrypt
End Macro
Macro encrypt                           someArguments&
  Local foundAlgorithm, theFinal, lblPlaintext, lenPlaintext, padding
  foundAlgorithm                        =                                       false
  Match                                 theAlgorithm theRest,                   someArguments
    Irpv                                item,                                   crypto@@lstCryptos
      Match                             algorithm =, alignment =, encrypt =, decrypt,                                   item
        Match                           `algorithm,                             `theAlgorithm
          displayOnNewLine '<encrypt:', `theAlgorithm, '>'
          displayOnNewLine '{'
          indentMore
          Macro theFinal
            encrypt                     lblPlaintext,                           lenPlaintext,                           theRest
          End Macro
          foundAlgorithm                =                                       true
          padding                       =                                       ( alignment )
          Break
        End Match
      End Match
    End Irpv
    If ( foundAlgorithm = false )
      fail 'encryption', 'unknown algorithm »', `theAlgorithm, '«'
    End If
  Else Match                            theAlgorithm,                           someArguments
    Irpv                                item,                                   crypto@@lstCryptos
      Match                             algorithm =, alignment =, encrypt =, decrypt,                                   item
        Match                           `algorithm,                             `theAlgorithm
          displayOnNewLine '<encrypt:', `theAlgorithm, '>'
          displayOnNewLine '{'
          indentMore
          Macro theFinal
            ;there should not be any encryption without arguments, i.e. a key, the block cipher mode of operation, initalisation vector, etc.; well, perhaps ROT13
            encrypt                     lblPlaintext,                           lenPlaintext
          End Macro
          foundAlgorithm                =                                       true
          padding                       =                                       ( alignment )
          Break
        End Match
      End Match
    End Irpv
    If ( foundAlgorithm = false )
      fail 'encryption', 'unknown algorithm »', `theAlgorithm, '«'
    End If
  Else
    fail 'encryption', 'cannot match'
  End Match
  Macro end?.encrypt
      rb                                ( padding - (( $ - 1 ) mod padding ) - 1 )
      db                                ''
      lenPlaintext                      =                                       ( $ )
    End Virtual
    theFinal
    indentLess
    displayOnNewLine '}'
    Purge end?.encrypt
  End Macro
  Virtual                               At null
    lblPlaintext::
End Macro
Macro decrypt                           someArguments&
  Local foundAlgorithm, theFinal, lblCiphertext, lenCiphertext, padding
  foundAlgorithm                        =                                       false
  Match                                 theAlgorithm theRest,                   someArguments
    Irpv                                item,                                   crypto@@lstCryptos
      Match                             algorithm =, alignment =, encrypt =, decrypt,                                   item
        Match                           `algorithm,                             `theAlgorithm
          displayOnNewLine '<decrypt:', `theAlgorithm, '>'
          displayOnNewLine '{'
          indentMore
          Macro theFinal
            decrypt                     lblCiphertext,                          lenCiphertext,                          theRest
          End Macro
          foundAlgorithm                =                                       true
          padding                       =                                       ( alignment )
          Break
        End Match
      End Match
    End Irpv
    If ( foundAlgorithm = false )
      fail 'decryption', 'unknown algorithm »', `theAlgorithm, '«'
    End If
  Else Match                            theAlgorithm,                           someArguments
    Irpv                                item,                                   crypto@@lstCryptos
      Match                             algorithm =, alignment =, encrypt =, decrypt,                                   item
        Match                           `algorithm,                             `theAlgorithm
          displayOnNewLine '<decrypt:', `theAlgorithm, '>'
          displayOnNewLine '{'
          indentMore
          Macro theFinal
            ;there should not be any decryption without arguments, i.e. a key, the block cipher mode of operation, initalisation vector, etc.; well, perhaps ROT13
            decrypt                     lblCiphertext,                          lenCiphertext
          End Macro
          foundAlgorithm                =                                       true
          padding                       =                                       ( alignment )
          Break
        End Match
      End Match
    End Irpv
    If ( foundAlgorithm = false )
      fail 'decryption', 'unknown algorithm »', `theAlgorithm, '«'
    End If
  Else
    fail 'decryption', 'cannot match'
  End Match
  Macro end?.decrypt
      rb                                ( padding - (( $ - 1 ) mod padding ) - 1 )
      db                                ''
      lenCiphertext                     =                                       ( $ )
    End Virtual
    theFinal
    indentLess
    displayOnNewLine '}'
    Purge end?.decrypt
  End Macro
  Virtual                               At null
    lblCiphertext::
End Macro
crypto@@lstCryptoKeys                   Equ
Macro crypto@@addCryptoKey              keyName*,                               keyGenerator*
  crypto@@lstCryptoKeys                 Equ                                     keyName, keyGenerator
End Macro
Macro key                               myKey*,                                 someArguments&
  Local foundKey, theFinal, lblKey, lenKey
  foundKey                              =                                       false
  Match                                 theKey theRest,                         someArguments
    Irpv                                item,                                   crypto@@lstCryptoKeys
      Match                             keyName =, keyGenerator,                                                        item
        Match                           `keyName,                               `theKey
          displayOnNewLine '<key:', `theKey, '>'
          displayOnNewLine '{'
          indentMore
          Macro theFinal
            myKey keyGenerator          lblKey,                                 lenKey,                                 theRest
          End Macro
          foundKey                      =                                       true
          Break
        End Match
      End Match
    End Irpv
    If ( foundKey = false )
      fail 'key', 'unknown key-generator »', `theKey, '«'
    End If
  Else Match                            theKey,                                 someArguments
    Irpv                                item,                                   crypto@@lstCryptoKeys
      Match                             keyName =, keyGenerator,                                                        item
        Match                           `keyName,                               `theKey
          displayOnNewLine '<key:', `theKey, '>'
          displayOnNewLine '{'
          indentMore
          Macro theFinal
            myKey keyGenerator          lblKey,                                 lenKey
          End Macro
          foundKey                      =                                       true
          Break
        End Match
      End Match
    End Irpv
    If ( foundKey = false )
      fail 'key', 'unknown key-generator »', `theKey, '«'
    End If
  Else
    fail 'key', 'cannot match'
  End Match
  Macro end?.key
      lenKey                            =                                       ( $ )
    End Virtual
    theFinal
    indentLess
    displayOnNewLine '}'
    Purge end?.key
  End Macro
  Virtual                               At null
    lblKey::
End Macro

Include 'include/main.flib'
Include 'include/display.flib'
Include 'include/mememap.flib'
;( some cryptos )
;{
  Include 'include/crypto/aes.flib'
;}

