Include 'include/crypto/aes/tables.flib'
Struc aes@@TE0                          count*
  Local temp
  Load                                  temp dword                              From aes@@lblTE0:( dword * count )
  .                                     =                                       temp
End Struc
Struc aes@@TE1                          count*
  Local temp
  Load                                  temp dword                              From aes@@lblTE1:( dword * count )
  .                                     =                                       temp
End Struc
Struc aes@@TE2                          count*
  Local temp
  Load                                  temp dword                              From aes@@lblTE2:( dword * count )
  .                                     =                                       temp
End Struc
Struc aes@@TE3                          count*
  Local temp
  Load                                  temp dword                              From aes@@lblTE3:( dword * count )
  .                                     =                                       temp
End Struc
Struc aes@@TE4                          count*
  Local temp
  Load                                  temp byte                               From aes@@lblTE4:( count )
  .                                     =                                       temp
End Struc
Struc aes@@TD0                          count*
  Local temp
  Load                                  temp dword                              From aes@@lblTD0:( dword * count )
  .                                     =                                       temp
End Struc
Struc aes@@TD1                          count*
  Local temp
  Load                                  temp dword                              From aes@@lblTD1:( dword * count )
  .                                     =                                       temp
End Struc
Struc aes@@TD2                          count*
  Local temp
  Load                                  temp dword                              From aes@@lblTD2:( dword * count )
  .                                     =                                       temp
End Struc
Struc aes@@TD3                          count*
  Local temp
  Load                                  temp dword                              From aes@@lblTD3:( dword * count )
  .                                     =                                       temp
End Struc
Struc aes@@TD4                          count*
  Local temp
  Load                                  temp byte                               From aes@@lblTD4:( count )
  .                                     =                                       temp
End Struc

Struc aes@@encryptionKey                key*,                                   length*
  Local temp, line, offs
  Local t0, t1, t2, t3
  Local lblRoundKeys
  Virtual                               At null
    lblRoundKeys::
    Load                                temp length                             From key
    dbx ( length ):                     temp
    If      ( length = 16 )
      offs                              =                                       null
      Load                              temp dword                              From ( 3 * dword )
      Repeat                            10,                                     round:( null )
        t0                              aes@@TE4                                (( temp        ) and 0xff )
        t1                              aes@@TE4                                (( temp shr  8 ) and 0xff )
        t2                              aes@@TE4                                (( temp shr 16 ) and 0xff )
        t3                              aes@@TE4                                (( temp shr 24 )          )
        t0                              =                                       ( t0 shl 24 )
        t2                              =                                       ( t2 shl  8 )
        t3                              =                                       ( t3 shl 16 )
        Load                            line dword                              From aes@@rcon:( round * dword )
        Load                            temp dword                              From ( offs + 0 )
        temp                            =                                       ( t0 xor t3 xor t2 xor t1 xor line xor temp )
        dd                              temp
        Load                            line dword                              From ( offs + 1 * dword )
        temp                            =                                       ( line xor temp )
        dd                              temp
        Load                            line dword                              From ( offs + 2 * dword )
        temp                            =                                       ( line xor temp )
        dd                              temp
        Load                            line dword                              From ( offs + 3 * dword )
        temp                            =                                       ( line xor temp )
        dd                              temp
        offs                            =                                       ( offs + 16 )
      End Repeat
    Else If ( length = 24 )
    Else If ( length = 32 )
    Else
      fail 'aes@@encryptBlock', 'invalid length of key'
    End If
    bufRoundKeys                        mememap@@allocate                       ( $ )
    mememap@@writeBuffer                bufRoundKeys,                           lblRoundKeys:( null ),                  ( $ )
    .encType                            Equ                                     'aes128enc'
    .encRoundKeys                       =                                       bufRoundKeys
    .encSize                            =                                       length
  End Virtual
End Struc
Macro crypto@@encAES                    lblPlainText*,                          lenPlainText*,                          key*
  ;assume, that block-size is 128bit
  Local rounds, temp, line
  Local roundKey, lookup, lastRound
  Local t0, t1, t2, t3
  Local s0, s1, s2, s3
  If      (( key.encSize = 16 ) & ( key.encType eq 'aes128enc' ))
    rounds                              =                                       5
  Else If (( key.encSize = 24 ) & ( key.encType eq 'aes192enc' ))
    rounds                              =                                       6
  Else If (( key.encSize = 32 ) & ( key.encType eq 'aes256enc' ))
    rounds                              =                                       7
  Else
    fail 'aes@@encryptBlock', 'invalid length of key'
  End If
  Struc roundKey                        line*,                                  count*
    Local temp
    temp                                mememap@@readValue                      ( key.encRoundKeys + dword * count ),   dword
    .                                   =                                       ( line xor temp )
  End Struc
  Struc lookup                          s0*,      s1*,      s2*,      s3*
    Local t0, t1, t2, t3
    t0                                  aes@@TE0                                (( s0        ) and 0xff )
    t1                                  aes@@TE1                                (( s1 shr  8 ) and 0xff )
    t2                                  aes@@TE2                                (( s2 shr 16 ) and 0xff )
    t3                                  aes@@TE3                                (( s3 shr 24 ) and 0xff )
    .                                   =                                       ( t0 xor t1 xor t2 xor t3 )
  End Struc
  Struc lastRound                       t0*,      t1*,      t2*,      t3*
    Local s0, s1, s2, s3
    s0                                  aes@@TE4                                (( t0        ) and 0xff )
    s1                                  aes@@TE4                                (( t1 shr  8 ) and 0xff )
    s2                                  aes@@TE4                                (( t2 shr 16 ) and 0xff )
    s3                                  aes@@TE4                                (( t3 shr 24 ) and 0xff )
    s1                                  =                                       ( s1 shl  8 )
    s2                                  =                                       ( s2 shl 16 )
    s3                                  =                                       ( s3 shl 24 )
    .                                   =                                       ( s0 xor s1 xor s2 xor s3 )
  End Struc
  If ( lenPlainText and 0x07 )
    fail 'aes@@encryptBlock', 'input must be aligned to block-size'
  End If
  Repeat                                ( lenPlainText / 16 ),                  offs:( null )
    Load                                s0  dword                               From lblPlainText:( 16 * offs + 0 * dword )
    Load                                s1  dword                               From lblPlainText:( 16 * offs + 1 * dword )
    Load                                s2  dword                               From lblPlainText:( 16 * offs + 2 * dword )
    Load                                s3  dword                               From lblPlainText:( 16 * offs + 3 * dword )
    Repeat                              rounds,                                 round:( 0 )
      s0                                roundKey                                s0,                                     ( 8 * round + 0 )
      s1                                roundKey                                s1,                                     ( 8 * round + 1 )
      s2                                roundKey                                s2,                                     ( 8 * round + 2 )
      s3                                roundKey                                s3,                                     ( 8 * round + 3 )
      t0                                lookup                                  s0,       s1,       s2,       s3
      t1                                lookup                                  s1,       s2,       s3,       s0
      t2                                lookup                                  s2,       s3,       s0,       s1
      t3                                lookup                                  s3,       s0,       s1,       s2
      t0                                roundKey                                t0,                                     ( 8 * round + 4 )
      t1                                roundKey                                t1,                                     ( 8 * round + 5 )
      t2                                roundKey                                t2,                                     ( 8 * round + 6 )
      t3                                roundKey                                t3,                                     ( 8 * round + 7 )
      If ( round = ( rounds - 1 ))
        Break
      End If
      s0                                lookup                                  t0,       t1,       t2,       t3
      s1                                lookup                                  t1,       t2,       t3,       t0
      s2                                lookup                                  t2,       t3,       t0,       t1
      s3                                lookup                                  t3,       t0,       t1,       t2
    End Repeat
    s0                                  lastRound                               t0,       t1,       t2,       t3
    s1                                  lastRound                               t1,       t2,       t3,       t0
    s2                                  lastRound                               t2,       t3,       t0,       t1
    s3                                  lastRound                               t3,       t0,       t1,       t2
    s0                                  roundKey                                s0,                                     ( 8 * rounds + 0 )
    s1                                  roundKey                                s1,                                     ( 8 * rounds + 1 )
    s2                                  roundKey                                s2,                                     ( 8 * rounds + 2 )
    s3                                  roundKey                                s3,                                     ( 8 * rounds + 3 )
    dd                                  s0,       s1,       s2,       s3
  End Repeat
End Macro
Macro crypto@@decAES ignore&
  fail 'crypto@@decAES', 'not implemented yet'
End Macro
crypto@@addCrypto                       aes,                                    crypto@@encAES,                         crypto@@decAES
