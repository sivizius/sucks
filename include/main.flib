Element invalid
nil                                     =                                       (( 1 shl 63 ) - 1 + ( 1 shl 63 ))
null                                    =                                       ( 0 )
false                                   Equ                                     ( 0 )
true                                    Equ                                     ( 1 )
decimal                                 =                                       ( -1 )
NUMBER                                  =                                       ( 23 )
FLOAT                                   =                                       ( 13.37 )
STRING                                  =                                       '42'
NANOSECONDS                             =                                       ( 1 )
MICROSECONDS                            =                                       ( 1000 * NANOSECONDS )
MILLISECONDS                            =                                       ( 1000 * MICROSECONDS )
SECONDS                                 =                                       ( 1 )
MINUTES                                 =                                       ( 60 * SECONDS )
HOURS                                   =                                       ( 60 * HOURS )

Macro enumerate                         value,                                  consts&
  Local k, item
  k                                     =                                       value
  Irp item, consts
    item                                =                                       k
    k                                   =                                       ( k + 1 )
  End Irp
End Macro

Macro fail                              function*,          message&
  Local theMessage
  Postpone
    display 10, 27, '[36m'
  End Postpone
  Irpv                                  item,                                   __file__
    display '  ->', `item, 10
  End Irpv
  Virtual                               At null
    Irp                                 theString,                              message
      Match                             size value,                             theString
        If      ( size )
          db '0x'
          If      ( size = -1 )
           Repeat 1, num:( value )
              db `num
            End Repeat
          Else If ( size = byte )
            hb value
          Else If ( size = word )
            hw value
          Else If ( size = dword )
            hd value
          Else
            hq value
          End If
        Else
          db value
        End If
      Else
        If ( theString = 10 )
          db '  '
        End If
        db theString
      End Match
    End Irp
    Load                                theMessage ( $ )                        From null
  End Virtual
  Err 10, '  [', function, '] ',  theMessage
  ;Err 10, '  [', function, '] ',  message
  Break
  Break
  Break
  Break
  Break
End Macro

Macro comment
  Macro ?! line&
    If ( `line = 'end comment' )
      Purge ?
    End If
  End Macro
End Macro

Struc float2decimal                     value*,                                 precision:( 4 )
  Local absValue, signValue, absPower, signPower, absReal
  If      ( value = 0.0 )
    absValue                            =                                       ( 0.0 )
    Virtual                             At null
      dq                                value
      Load                              temp qword                              From null
    End Virtual
    If ( temp and 0x8000000000000000 )
      signValue                         Equ                                     '-'
    Else
      signValue                         Equ                                     '+'
    End If
  Else If ( value < 0.0 )
    absValue                            =                                       ( 0 - value )
    signValue                           Equ                                     '-'
  Else
    absValue                            =                                       ( 0 + value )
    signValue                           Equ                                     '+'
  End If
  absPower                              =                                       ( 0 )
  If      ( absValue =   0.0 )
    signPower                           Equ                                     ''
  Else If ( absValue >= 10.0 )
    While ( absValue >= 10.0 )
      absValue                          =                                       ( absValue / 10.0 )
      absPower                          =                                       ( absPower + 1 )
    End While
    signPower                           Equ                                     '+'
  Else If ( absValue <  1.0 )
    While ( absValue <  1.0 )
      absValue                          =                                       ( absValue * 10.0 )
      absPower                          =                                       ( absPower + 1 )
    End While
    signPower                           Equ                                     '-'
  Else
    signPower                           Equ                                     ''
  End If
  If      ( precision > 0 )
    Virtual                             At null
      db '.'
      rb precision
      db ''
      temp                              =                                       ( absValue - ( trunc absValue ))
      Repeat                            ( precision ),                          offs:( 1 )
        temp                            =                                       ( temp * 10.0 )
        Store                           byte ( '0' + ( trunc temp ))            At offs
        temp                            =                                       ( temp - ( trunc temp ))
      End Repeat
      global                            =                                       temp
      If ( temp >= 0.499999999999999999999999999999999 )
        Repeat                          ( precision ),                          offs:( 0 )
          Load                          temp byte                               From  ( precision - offs )
          If ( temp = '9' )
            temp                        =                                       '0'
          Else
            temp                        =                                       temp + 1
          End If
          Store                         byte temp                               At ( precision - offs )
          If ( temp <> '0' )
            Break
          End If
        End Repeat
        If ( temp = '0' )
          absValue                      =                                       ( absValue + 1 )
        End If
      End If
      Load                              absReal ( precision + 1 )               From null
    End Virtual
  Else If ( precision > 0 )
    fail 'float2decimal', 'precision must be a positive integer or null'
  End If
  Repeat                                1,                                      integerPart:( trunc absValue )
    Repeat                              1,                                      powerPart:(         absPower )
      .                                 Equ                                     signValue, `integerPart, string absReal, 'e', signPower, `powerPart
    End Repeat
  End Repeat
End Struc
Macro text
  Macro ?! line&
    If ( `line = 'end text' )
      Purge ?
    Else
      db `line
    End If
  End Macro
End Macro

Include 'include/main/context.flib'
Include 'include/main/data.flib'
Include 'include/main/display.flib'
Include 'include/main/files.flib'
Include 'include/main/mememap.flib'
Include 'include/main/random.flib'
Include 'include/crypto.flib'
