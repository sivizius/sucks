;( opcodes )
;{
  fbc0@@opNull                          =                                       0x00
  fbc0@@opPushByte                      =                                       0x01
  fbc0@@opPushWord                      =                                       0x02
  fbc0@@opPushDWord                     =                                       0x03
  fbc0@@opPushQWord                     =                                       0x04
  ;5,6,7,8,9,a,b
  fbc0@@opLetGlobal                     =                                       0x0c
  fbc0@@opLetLocal                      =                                       0x0d
  fbc0@@opGetGlobal                     =                                       0x0e
  fbc0@@opGetLocal                      =                                       0x0f

  fbc0@@opAdd                           =                                       0x10
  fbc0@@opSub                           =                                       0x11
  fbc0@@opMul                           =                                       0x12
  fbc0@@opDiv                           =                                       0x13
  fbc0@@opMod                           =                                       0x14
  fbc0@@opNot                           =                                       0x15
  fbc0@@opAnd                           =                                       0x16
  fbc0@@opOr                            =                                       0x17
  fbc0@@opXor                           =                                       0x18
  fbc0@@opShiftMore                     =                                       0x19
  fbc0@@opUnsignedShiftMore             =                                       fbc0@@opShiftMore
  fbc0@@opShiftLess                     =                                       0x1a
  fbc0@@opUnsignedShiftLess             =                                       0x1b

  fbc0@@opWhen                          =                                       0x20
  fbc0@@opLoop                          =                                       0x21
  fbc0@@opNext                          =                                       0x22
  fbc0@@opBreak                         =                                       0x23
  fbc0@@opDone                          =                                       0x24
  fbc0@@opLogicalNot                    =                                       0x25
  fbc0@@opLogicalAnd                    =                                       0x26
  fbc0@@opLogicalOr                     =                                       0x27
  fbc0@@opLogicalXor                    =                                       0x28

  fbc0@@opFunction                      =                                       0x30
  fbc0@@opCall                          =                                       0x31

  fbc0@@opAllocGlobal                   =                                       0xfb
  fbc0@@opAllocLocal                    =                                       0xfc
  fbc0@@opAllocate                      =                                       0xfd

  fbc0@@opStop                          =                                       0xff
;}
;( function )
;{
  fbc0@@lenFunctionHeader               =                                       16
  fbc0@@offFunctionInstruction          =                                       0x00
  fbc0@@offFunctionPadByte              =                                       0x01
  fbc0@@offFunctionSize                 =                                       0x02
  fbc0@@offFunctionReturnType           =                                       0x04
  fbc0@@offFunctionNumArguments         =                                       0x06
  fbc0@@offFunctionMyName               =                                       0x08
  fbc0@@offFunctionPadDWord             =                                       0x0c
;}

Struc fbc0@@mnemonic                    instruction*
  If      ( instruction = fbc0@@opPushByte )
    .                                   Equ                                     'pushByte'
  Else If ( instruction = fbc0@@opPushWord )
    .                                   Equ                                     'pushWord'
  Else If ( instruction = fbc0@@opPushDWord )
    .                                   Equ                                     'pustDWord'
  Else If ( instruction = fbc0@@opPushQWord )
    .                                   Equ                                     'pushQWord'
  Else If ( instruction = fbc0@@opAdd )
    .                                   Equ                                     'add'
  Else If ( instruction = fbc0@@opSub )
    .                                   Equ                                     'sub'
  Else If ( instruction = fbc0@@opMul )
    .                                   Equ                                     'mul'
  Else If ( instruction = fbc0@@opDiv )
    .                                   Equ                                     'div'
  Else If ( instruction = fbc0@@opMod )
    .                                   Equ                                     'mod'
  Else If ( instruction = fbc0@@opNot )
    .                                   Equ                                     'not'
  Else If ( instruction = fbc0@@opAnd )
    .                                   Equ                                     'and'
  Else If ( instruction = fbc0@@opOr )
    .                                   Equ                                     'or'
  Else If ( instruction = fbc0@@opXor )
    .                                   Equ                                     'xor'
  Else If ( instruction = fbc0@@opLogicalNot )
    .                                   Equ                                     'lnot'
  Else If ( instruction = fbc0@@opLogicalAnd )
    .                                   Equ                                     'land'
  Else If ( instruction = fbc0@@opLogicalOr )
    .                                   Equ                                     'lor'
  Else If ( instruction = fbc0@@opLogicalXor )
    .                                   Equ                                     'lxor'
  Else If ( instruction = fbc0@@opLetGlobal )
    .                                   Equ                                     'letGlobal'
  Else If ( instruction = fbc0@@opLetLocal )
    .                                   Equ                                     'letLocal'
  Else If ( instruction = fbc0@@opGetGlobal )
    .                                   Equ                                     'getGlobal'
  Else If ( instruction = fbc0@@opGetLocal )
    .                                   Equ                                     'getLocal'
  Else If ( instruction = fbc0@@opCall )
    .                                   Equ                                     'call'
  Else If ( instruction = fbc0@@opWhen )
    .                                   Equ                                     'when'
  Else If ( instruction = fbc0@@opLoop )
    .                                   Equ                                     'loop'
  Else If ( instruction = fbc0@@opNext )
    .                                   Equ                                     'next'
  Else If ( instruction = fbc0@@opBreak )
    .                                   Equ                                     'break'
  Else If ( instruction = fbc0@@opDone )
    .                                   Equ                                     'done'
  Else If ( instruction = fbc0@@opAllocGlobal )
    .                                   Equ                                     'allocateGlobal'
  Else If ( instruction = fbc0@@opAllocLocal )
    .                                   Equ                                     'allocateLocal'
  Else If ( instruction = fbc0@@opAllocate )
    .                                   Equ                                     'allocate'
  Else If ( instruction = fbc0@@opFunction )
    .                                   Equ                                     'function'
  Else If ( instruction = fbc0@@opStop )
    .                                   Equ                                     'stop'
  Else
    .                                   Equ                                     '<unknown instruction>'
  End If
End Struc
;( types )
;{
  fbc0@@tNothing                        =                                       0x00                                    ;empty operant
  fbc0@@tConstant                       =                                       0x01                                    ;value                is a constant value
  fbc0@@tString                         =                                       0x02                                    ;operant              is a constant string
  fbc0@@tAddress                        =                                       0x03                                    ;value                is at address=value
  fbc0@@tBuffer                         =                                       0x04                                    ;buffer/string        may lie at address=value
  fbc0@@tPointer                        =                                       0x05                                    ;value/buffer/string  is at an address pointed by address
  fbc0@@tVariable                       =                                       0x06                                    ;operant              is some kind of highlevel variable of fixed size
  fbc0@@tRegister                       =                                       0x07                                    ;operant              is a register
  fbc0@@tFunction                       =                                       0x08                                    ;operant              is a function
  fbc0@@tArgument                       =                                       0x09                                    ;an argument comes after this
  fbc0@@tTreeNode                       =                                       0x0a                                    ;its a tree-node
  fbc0@@tOperator                       =                                       0x0b                                    ;its a operator
  fbc0@@tStack                          =                                       0x0c                                    ;value is in the stack
  fbc0@@tUnknown                        =                                       0xff                                    ;unknown operant, should cause an fatal error!
;}
;( return-types )
;{
  Macro fbc0@@qword                     someArguments&
    ;
  End Macro
;}
Struc assembly@@fbc0                    ignore&
  Local theMain
  Macro assembly@@finaliser
    stop
    fbc0@@killMySelf
  End Macro
  Include 'include/assembly/fruitbot/fbc0.flib'
  .uf4                                  =                                       fbc0@@version
  Macro .yasic.if
    ;;.yasic.pushExpression
    format@@newSpace
  End Macro
  Macro .yasic.elif
    Local theSpace
    done
    theSpace format@@endSpace
    when                                ( theSpace.offs )
    ;;.yasic.pushExpression
    format@@newSpace
  End Macro
  Macro .yasic.else
    Local theSpace
    done
    theSpace format@@endSpace
    when                                ( theSpace.offs )
    ;;.yasic.pushConstant                 ( 1 )
    format@@newSpace
  End Macro
  Macro .yasic.endif
    Local theSpace
    done
    theSpace format@@endSpace
    next                                ( theSpace.offs )
  End Macro
  Macro .yasic.while
    format@@newSpace
    ;;.yasic.pushExpression
    lnot
    break
  End Macro
  Macro .yasic.endwhile
    Local theSpace
    done
    theSpace format@@endSpace
    loop                                ( theSpace.offs )
  End Macro
  Macro .yasic.compile                  node*
    If      ( node.type = yasic@@tOperator )
      If      ( node.value = yasic@@opAdd )
        add
      Else If ( node.value = yasic@@opSub )
        sub
      Else If ( node.value = yasic@@opMul )
        mul
      Else If ( node.value = yasic@@opDiv )
        div
      Else
        fail 'fruitbot.yasic.compile', 'unknown operator: ', qword node.value
      End If
    Else If ( node.type = yasic@@tConstConstant )
      pushConstant                      ( node.value + 0 )
    Else If ( node.type = yasic@@tConstByte )
      pushByte                          ( node.value + 0 )
    Else If ( node.type = yasic@@tConstWord )
      pushWord                          ( node.value + 0 )
    Else If ( node.type = yasic@@tConstDword )
      pushDWord                         ( node.value + 0 )
    Else If ( node.type = yasic@@tConstQWord )
      pushQWord                         ( node.value + 0 )
    Else If ( node.type = yasic@@tVariableGlobal )
      ;pushConstant                      ( node.misc  + 0 )                      ;type uid
      ;pushConstant                      ( node.value + 0 )                      ;var uid
      ;getGlobal
    Else If ( node.type = yasic@@tVariableLocal )
      ;pushConstant                      ( node.misc  + 0 )                      ;type uid
      ;pushConstant                      ( node.value + 0 )                      ;var uid
      ;getLocal
    Else
      fail 'fruitbot.yasic.compile', 'unknown node-type: ', word node.type
    End If
  End Macro
  Macro .yasic.getGlobal                uid*,                                   type*
  End Macro
  Macro .yasic.getLocal                 uid*,                                   type*
  End Macro
  Macro .yasic.init
    ;yasic@@newType                      byte,                                   byte
    ;yasic@@newType                      word,                                   word
    ;yasic@@newType                      dword,                                  dword
    yasic@@newType                      qword,                                  qword
  End Macro
End Struc
assembly@@addInstructionSet             fbc0,                                   assembly@@fbc0