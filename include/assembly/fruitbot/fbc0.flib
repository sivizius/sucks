fbc0@@version                           =                                       0xc0fb
;( arguments )
;{
  ;:the ›machine‹ for the internal bytecode is a stack-machine and instructions are in a reverse polish notation.
  ;:every argument must be pushed on the stack before other instructions can use them.
  ;:the different types are just for of optimisation-reasons, because this is going to be the main-instruction.
  ;:the stack-width for constant values is 8 byte (qword) and every value is signed extended.
  ;:to distinguish between signed and unsigned values the is also a bit for sign.
  ;:but as i said, values are sign-extended so a qword of 0xffffffffffffffff would be equal to (-1).
  ;:to prevent that, the value can be inverted and a `not` can be added on compile-time.
  Macro pushByte                        value*
    lister@@putInstruction              'pushByte'
    lister@@putOperand                  byte value
    assembly@@putInstruction
    assembly@@putByte                   fbc0@@opPushByte
    assembly@@putByte                   value
  End Macro
  Macro pushWord                        value*
    lister@@putInstruction              'pushWord'
    lister@@putOperand                  word value
    assembly@@putInstruction
    assembly@@putByte                   fbc0@@opPushWord
    assembly@@putWord                   value
  End Macro
  Macro pushDWord                       value*
    lister@@putInstruction              'pushDWord'
    lister@@putOperand                  dword value
    assembly@@putInstruction
    assembly@@putByte                   fbc0@@opPushDWord
    assembly@@putDWord                  value
  End Macro
  Macro pushQWord                       value*
    lister@@putInstruction              'pushQWord'
    lister@@putOperand                  qword value
    assembly@@putInstruction
    assembly@@putByte                   fbc0@@opPushQWord
    assembly@@putQWord                  value
  End Macro
  Macro pushConstant                    value*
    If      (( value >= -( 1 shl  7 )) & ( value < ( 1 shl  7 )))
      pushByte                          value
    Else If (( value >= -( 1 shl 15 )) & ( value < ( 1 shl 15 )))
      pushWord                          value
    Else If (( value >= -( 1 shl 31 )) & ( value < ( 1 shl 31 )))
      pushDWord                         value
    Else If ( value >= ( 1 shl 63 ))
      pushQWord                         ( not value )
      not
    Else
      pushQWord                         value
    End If
  End Macro
  Macro pushString                      string&
    Local temp
    lister@@putInstruction              'pushString'
    lister@@putOperand                  '»', string, '«'
    assembly@@putInstruction
    assembly@@putByte                   fbc0@@opPushQWord
    temp                                assembly@@putSymbol                     string
    assembly@@putQWord                  temp
  End Macro
;}
Irp                                     < name,       opcode >,             \
                                        add,          fbc0@@opAdd,          \
                                        sub,          fbc0@@opSub,          \
                                        mul,          fbc0@@opMul,          \
                                        div,          fbc0@@opDiv,          \
                                        mod,          fbc0@@opMod,          \
                                        not,          fbc0@@opNot,          \
                                        and,          fbc0@@opAnd,          \
                                        or,           fbc0@@opOr,           \
                                        xor,          fbc0@@opXor,          \
                                        lnot,         fbc0@@opLogicalNot,   \
                                        land,         fbc0@@opLogicalAnd,   \
                                        lor,          fbc0@@opLogicalOr,    \
                                        lxor,         fbc0@@opLogicalXor,   \
                                        break,        fbc0@@opBreak,        \
                                        done,         fbc0@@opDone,         \
                                        letGlobal,    fbc0@@opLetGlobal,    \
                                        letLocal,     fbc0@@opLetLocal,     \
                                        getGlobal,    fbc0@@opGetGlobal,    \
                                        getLocal,     fbc0@@opGetLocal,     \
                                        stop,         fbc0@@opStop,         \
                                        allocGlobal,  fbc0@@opAllocGlobal,  \
                                        allocLocal,   fbc0@@opAllocLocal,   \
                                        allocate,     fbc0@@opAllocate
  Macro name                            ignore
    lister@@putInstruction              `name
    assembly@@putInstruction
    assembly@@putByte                   opcode
  End Macro
End Irp
Irp                                     < name, opcode >,                   \
                                        when,   fbc0@@opWhen,               \
                                        next,   fbc0@@opNext,               \
                                        loop,   fbc0@@opLoop,               \
                                        call,   fbc0@@opCall
  Macro name                            address*
    Local info
    info                                yapters@@info
    pushConstant                        ( address - info.offs )
    lister@@putInstruction              `name
;    lister@@putOperand                  string
    assembly@@putInstruction
    assembly@@putInstruction
    assembly@@putByte                   opcode
  End Macro
End Irp
;( functions )
;{
  Macro fbc0@@function                  myName*,            lenFunction*,       returnType*,        numArguments*
    Local temp
    lister@@putPrefix                   'function'
    lister@@putLabel                    myName
    lister@@indentMore
    assembly@@putByte                   fbc0@@opFunction
    assembly@@putByte                   fbc0@@opStop                            ;stops buggy parsers
    assembly@@putWord                   lenFunction                             ;size of function
    assembly@@putWord                   returnType                              ;type of return value
    assembly@@putWord                   numArguments                            ;number of arguments. it does not matter which type or size they have.
    temp                                assembly@@putSymbol                     myName
    assembly@@putQWord                  temp                                    ;name of function
  End Macro
  Macro function                        theFunction*
    Local length
    fbc0@@function                      `theFunction,       length,             null,               null
    Macro end?.function
      Purge end?.function
      lister@@indentLess
      length                            =                                       ( $ )
      lister@@putPrefix                 'end'
      lister@@putInstruction            'function'
    End Macro
  End Macro
;}

Macro fbc0@@killMySelf
  Purge pushByte, pushWord, pushDWord, pushQWord, pushConstant, pushString
  Purge add, sub, mul, div, mod, not, and, or, xor, lnot, land, lor, lxor, break, done, stop
  Purge let, stop
  Purge call, fbc0@@function
  Purge allocGlobal, allocLocal, allocate
  Purge when, next, loop, break, done
End Macro
