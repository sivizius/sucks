;( yapter-types )
;{
  yapters@@lenOfOneYapter               =                                       32
  Struc yapters@@addYapterType          yapters@@name*,     yapters@@func*,     yapters@@stop*
    If ( yapters@@tTypeCounter >= yapters@@tInvalidTypes )
      fail 'yapters@@addYapterType', 'maximum number of yapter-types reached'
    End If
    yapters@@lstYapterTypes             Equ                                     yapters@@name,      yapters@@func,      yapters@@stop
    .                                   =                                       ( yapters@@tTypeCounter )
    yapters@@tTypeCounter               =                                       ( yapters@@tTypeCounter + 1 )
  End Struc
  Struc yapters@@addUnlistedYapterType
    If ( yapters@@tTypeCounter >= yapters@@tInvalidTypes )
      fail 'yapters@@addUnlistedYapterType', 'maximum number of yapter-types reached'
    End If
    ;not directly accessable
    .                                   =                                       ( yapters@@tTypeCounter )
    yapters@@tTypeCounter               =                                       ( yapters@@tTypeCounter + 1 )
  End Struc
  ;( predefined yapter-types )
  ;{
    yapters@@tTypeCounter               =                                       0
    yapters@@tFinal                     yapters@@addUnlistedYapterType
    yapters@@tStrings                   yapters@@addUnlistedYapterType
    yapters@@tComment                   yapters@@addUnlistedYapterType
    yapters@@tData                      yapters@@addUnlistedYapterType
    yapters@@tBytecode                  yapters@@addUnlistedYapterType
    ;:  ---
    yapters@@tInvalidTypes              =                                       65536                                   ;and above
  ;}
;}
;( read yapters )
;{
  Struc yapters@@get                    ptrYapterTable*,                        numYapter*
    Local temp
    .offs                               =                                       ( ptrYapterTable + numYapter * yapters@@lenOfOneYapter )
;    displayValue '@0x', .offs
    Load                                temp word                               From format@@lblOutput:( .offs + 0x00 )
    .type                               =                                       temp
    Load                                temp word                               From format@@lblOutput:( .offs + 0x02 )
    .word                               =                                       temp
    Load                                temp dword                              From format@@lblOutput:( .offs + 0x04 )
    .dword                              =                                       temp
    Load                                temp qword                              From format@@lblOutput:( .offs + 0x08 )
    .qword0                             =                                       temp
    Load                                temp qword                              From format@@lblOutput:( .offs + 0x10 )
    .qword1                             =                                       temp
    Load                                temp qword                              From format@@lblOutput:( .offs + 0x18 )
    .qword2                             =                                       temp
  End Struc
;}
Macro uf4@@initFormat                   ignore&
  Local yapters@@ctrYapters, yapters@@lblYapters, yapters@@numYapters, yapters@@lenMagic
  Local yapters@@ptrYapter, yapters@@theYapter, yapters@@theFinal
  Local yapters@@ctrSymbols, yapters@@lblSymbols, yapters@@ptrSymbols, yapters@@maxSymbols, yapters@@lenSymbols, yapters@@flushSymbols
  format@@newSpace
    db '#!~/sba/bin/suckmore', 10
    db '#', 0x19, 0x96, 0x10, 0x03, 0x23, 0x42, 0x13, 0x37, 10, 0
    yapters@@lenMagic                   =                                       ( $ )
    rb ( yapters@@lenOfOneYapter * yapters@@numYapters )
    db ''
  yapters@@lblYapters                   format@@endSpace
  yapters@@theFirst                     =                                       ( yapters@@lblYapters + yapters@@lenMagic )
  yapters@@ctrYapters                   =                                       null
  Struc yapters@@addYapter              type*,              word0:( null ),     dword0:( null ), \
                                        qword0:( null ),    qword1:( null ),    qword2:( null )
    .                                   =                                       ( yapters@@ctrYapters )
    yapters@@ctrYapters                 =                                       ( yapters@@ctrYapters + 1 )
    .offs                               =                                       ( yapters@@lblYapters + yapters@@lenMagic + yapters@@lenOfOneYapter * . )
    Store                               word  type                              At format@@lblOutput:( .offs + 0x00 )
    Store                               word  word0                             At format@@lblOutput:( .offs + 0x02 )
    Store                               dword dword0                            At format@@lblOutput:( .offs + 0x04 )
    Store                               qword qword0                            At format@@lblOutput:( .offs + 0x08 )
    Store                               qword qword1                            At format@@lblOutput:( .offs + 0x10 )
    Store                               qword qword2                            At format@@lblOutput:( .offs + 0x18 )
  End Struc
  yapters@@ptrYapter                    =                                       null
  yapters@@theYapter                    =                                       null
  Macro yapters@@newYapter              type*,              word0:( null ),     dword0:( null ), \
                                        qword0:( null ),    qword1:( null ),    qword2:( null )
    yapters@@theYapter                  yapters@@addYapter  type,     word0,    dword0, \
                                                            qword0,   qword1,   qword2
    yapters@@ptrYapter                  =                                       ( format@@offsOutput )
  End Macro
  Struc yapters@@info
    .                                   =                                       yapters@@theYapter
    .base                               =                                       ( yapters@@ptrYapter - yapters@@theFinal.offs - yapters@@lenOfOneYapter )
    .offs                               =                                       ( yapters@@ptrYapter - format@@ptrOutput )
    .absolute                           =                                       ( yapters@@ptrYapter )
    ;displayValue 'base     0x', .base
    ;displayValue 'offs     0x', .offs
    ;displayValue 'absolute 0x', .absolute
    .size                               =                                       ( format@@offsOutput - yapters@@ptrYapter )
  End Struc
  Struc yapters@@endYapter
    .                                   yapters@@info
  End Struc
  ;( manage symbols )
  ;{
    yapters@@maxSymbols                 =                                       null
    yapters@@ctrSymbols                 =                                       null
    yapters@@ptrSymbols                 =                                       null
    ;displayValue 'yapters@@lenSymbols 0x', yapters@@lenSymbols
    Virtual                             At null
      yapters@@lblSymbols::
        rb                              ( yapters@@lenSymbols )
        db ''
    End Virtual
    Struc symbol?                       theSymbol&
      Local temp
      Virtual                           At null
        db                              theSymbol
        Store                           word  ( $ )                             At    yapters@@lblSymbols:( yapters@@ptrSymbols )
        Load                            temp  ( $ )                             From  null
        Store                           ( $ ) temp                              At    yapters@@lblSymbols:( yapters@@ptrSymbols + 2 )
        .                               =                                       ( yapters@@ptrSymbols + 2 )
        .size                           =                                       ( $ )
        .count                          =                                       ( yapters@@ctrSymbols )
        yapters@@ptrSymbols             =                                       ( yapters@@ptrSymbols + $ + 2 )
        yapters@@ctrSymbols             =                                       ( yapters@@ctrSymbols + 1 )
      End Virtual
    End Struc
    Macro symbol?                       theSymbol&
      Local void
      void                              symbol                                  theSymbol
    End Macro
    Macro yapters@@flushSymbols
      If ( yapters@@ptrSymbols > yapters@@maxSymbols )
        yapters@@maxSymbols             =                                       yapters@@ptrSymbols
      End If
      yapters@@ctrSymbols               =                                       null
      yapters@@ptrSymbols               =                                       null
    End Macro
    Struc putSymbols?
      Local temp, size
      size                              =                                       yapters@@ptrSymbols
      If ( size )
        yapters@@newYapter              yapters@@tStrings,                      null,               null, \
                                        null,                                   size,               .base
          format@@newSpace
            Load                        temp size                               From yapters@@lblSymbols:( null )
            emit                        size:( temp )
          format@@endSpace
        .                               yapters@@endYapter
        yapters@@flushSymbols
      Else
        .                               =                                       ( 0xffffffff )
      End If
    End Struc
  ;}
  Macro data
    Local theData, theResv
    Macro end?.data!
      theResv                           format@@endSpace
      theData                           yapters@@endYapter
      indentLess
      displayOnNewLine '}'
      Purge end?.data
    End Macro
    yapters@@newYapter                  yapters@@tData,                         null,               null, \
                                        theResv.resv,                           theData.size,       theData.base
    format@@newSpace
    displayOnNewLine '<data>'
    displayOnNewLine '{'
    indentMore
  End Macro
  ;( code pseudo-yapter )
  ;{
    ;>  code language
    ;>    ;some code
    ;>  end code
    Macro code                          someArguments&
      Local temp, info, theCode, theMain, theStrings
      Macro assembly@@finaliser
      End Macro
      Match                             theLanguage theRest,                    someArguments
        temp                            assembly@@findInstructionSet            theLanguage
        If ( temp )
          displayOnNewLine '<code:', temp.name, '>'
          displayOnNewLine '{'
          indentMore
          info                          temp.init                               theRest
        Else
          fail 'format→uf4→code', 'unknown language »', `theLanguage, '«'
        End If
      Else Match                        theLanguage,                            someArguments
        temp                            assembly@@findInstructionSet            theLanguage
        If ( temp )
          displayOnNewLine '<code:', temp.name, '>'
          displayOnNewLine '{'
          indentMore
          info                          temp.init
        Else
          fail 'format→uf4→code', 'unknown language »', `theLanguage, '«'
        End If
      Else
        fail 'format→uf4→code', 'cannot match'
      End Match
      Macro end?.code!
        assembly@@finaliser
        ;end listing
        theMain                         format@@endSpace
        theCode                         yapters@@endYapter
        theStrings                      putSymbols
        indentLess
        displayOnNewLine '}'
        Purge assembly@@finaliser
        Purge end?.code, temp.init
      End Macro
      yapters@@newYapter                yapters@@tBytecode,                     info.uf4,           theStrings, \
                                        ( theMain.offs - theCode.offs ),        theCode.size,       theCode.base
      format@@newSpace
      ;( listing is very slow, do not enable, unless you really need to, e.g. debugging the instructionsetmacros )
      ;listing
    End Macro
  ;}
  Macro uf4@@stopFormat
    Local theYapter, count, offs, temp, length
    yapters@@theFinal                   yapters@@addYapter                      null
    yapters@@numYapters                 =                                       ( yapters@@ctrYapters )
    .yapters@@numYapters                =                                       ( yapters@@ctrYapters )
    displayOnNewLine '#yapter    type     word   dword      qword              qword              qword'
    Repeat ( yapters@@numYapters ), count:( null )
      offs                              =                                       ( yapters@@lblYapters + yapters@@lenMagic + yapters@@lenOfOneYapter * count )
      displayOnNewLine '0x'
      displayHexDWord count
      display ' '
      Load                              temp word                               From format@@lblOutput:( offs + 0x00 )
      If false
      Else If ( temp = yapters@@tFinal )
        display 'final   '
      Else If ( temp = yapters@@tStrings )
        display 'strings '
      Else If ( temp = yapters@@tComment )
        display 'comment '
      Else If ( temp = yapters@@tBytecode )
        display 'bytecode'
      Else
        display '<0x'
        displayHexWord temp
        display '>'
      End If
      display ' 0x'
      Load                              temp word                               From format@@lblOutput:( offs + 0x02 )
      displayHexWord temp
      display ' 0x'
      Load                              temp dword                              From format@@lblOutput:( offs + 0x04 )
      displayHexDWord temp
      display ' 0x'
      Load                              temp qword                              From format@@lblOutput:( offs + 0x08 )
      displayHexQWord temp
      display ' 0x'
      Load                              length qword                            From format@@lblOutput:( offs + 0x10 )
      displayHexQWord length
      display ' 0x'
      Load                              temp qword                              From format@@lblOutput:( offs + 0x18 )
      displayHexQWord temp
      temp                              =                                       ( temp + yapters@@theFinal.offs + yapters@@lenOfOneYapter )
      display ' (0x'
      displayHexQWord temp
      display ')'
      If (( length ) & ( temp >= 0 ) & (( temp + length ) < format@@lenOutput ) & false )
        Load                            temp length                             From format@@lblOutput:( temp )
        Virtual                         At null                                 As `count
          dbx ( length ):               temp
        End Virtual
      End If
    End Repeat
    yapters@@flushSymbols
    yapters@@lenSymbols                 =                                       yapters@@maxSymbols
    displayValue 'ycontent @0x', ( yapters@@lblYapters + yapters@@lenMagic + yapters@@lenOfOneYapter * yapters@@numYapters )
    Purge code, yapters@@newYapter, symbol?
    Restruc yapters@@addYapter, yapters@@info, yapters@@endYapter, symbol?, putSymbols?
  End Macro
End Macro
format@@addFormat                       uf4,                uf4@@initFormat,    uf4@@stopFormat